#include <stdio.h>
#include <stdlib.h>
#include "s21_string.h"

#test strlen_test
char *s1 = "0123456789";
char *s2 = "";
char *s3 = "a";
ck_assert_int_eq(s21_strlen(s1), strlen(s1));
ck_assert_int_eq(s21_strlen(s2), strlen(s2));
ck_assert_int_eq(s21_strlen(s3), strlen(s3));


#test memchr_test
char *s1 = "012a3456789";
char *s2 = "";
int i = 3;
int c = '5';
s21_size_t n[5] = {0, 3, 6, 10, 15};
while (i >= 0) {
    ck_assert_ptr_eq(memchr(s1, c, n[i]), s21_memchr(s1, c, n[i]));
    ck_assert_ptr_eq(memchr(s2, c, n[i]), s21_memchr(s2, c, n[i]));
    i--;
}



#test memcmp_test
int i = 2;
char *str1 = "Hello World !!!";
char *str2 = "Hello Wirld !!!";
char *str3 = "a";
char *str4 = " ";
s21_size_t n[3] = {1, 6, 10};
while (i >= 0) {
    ck_assert_int_eq(memcmp(str1, str2, n[i]), s21_memcmp(str1, str2, n[i]));
    ck_assert_int_eq(memcmp(str3, str4, n[i]), s21_memcmp(str3, str4, n[i]));
    i--;
}


#test memcpy_test
int i = 2;
char str1[100] = " ";
char str2[100] = "Hello World !!!";
char str3[100] = "123456";
s21_size_t n[3] = {1, 6, 10};
while (i >= 0) {
    ck_assert_ptr_eq(memcpy(str1, str2, n[i]), s21_memcpy(str1, str2, n[i]));
    ck_assert_ptr_eq(memcpy(str2, str3, n[i]), s21_memcpy(str2, str3, n[i]));
    i--;
}


#test memmove_test
int i = 2;
char str1[100] = " ";
char str2[100] = "Hello World !!!";
char str3[100] = "123456";
s21_size_t n[3] = {1, 6, 10};
while (i >= 0) {
    ck_assert_ptr_eq(memmove(str1, str2, n[i]), s21_memmove(str1, str2, n[i]));
    ck_assert_ptr_eq(memmove(str2, str3, n[i]), s21_memmove(str2, str3, n[i]));
    i--;
}


#test memset_test
int i = 2;
char str1[100] = " ";
char str2[100] = "Hello World !!!";
s21_size_t n[3] = {1, 6, 10};
int c = '5';
while (i >= 0) {
ck_assert_ptr_eq(memset(str1, c, n[i]), s21_memset(str1, c, n[i]));
ck_assert_ptr_eq(memset(str2, c, n[i]), s21_memset(str2, c, n[i]));
i--;
}


#test strcat_test
char str1[100] = " ";
char str2[100] = "Hello World !!!";
char str3[100] = "123456";
ck_assert_str_eq(strcat(str1, str2), s21_strcat(str1, str2));
ck_assert_str_eq(strcat(str2, str3), s21_strcat(str2, str3));


#test strncat_test
int i =1 ;
char str1[100] = " ";
char str2[100] = "Hello World !!!";
char str3[100] = "123456";
s21_size_t n[3] = {1, 6};
while (i >= 0) {
ck_assert_str_eq(strncat(str1, str2, n[i]), s21_strncat(str1, str2, n[i]));
ck_assert_str_eq(strncat(str2, str3, n[i]), s21_strncat(str2, str3, n[i]));
i--;
}

#test strchr_test
char str1[100] = "Hello World !!!";
char str2[100] = "123456";
int c = '5';
ck_assert_ptr_eq(strchr(str1, c), s21_strchr(str1, c));
ck_assert_str_eq(strchr(str2, c), s21_strchr(str2, c));


#test strcmp_test
char str1[100] = "123456";
char str2[100] = "Hello World !!!";
char str3[100] = "123456";
char str4[100] = "12Hello World !!!";
ck_assert_int_eq(strcmp(str1, str2), s21_strcmp(str1, str2));
ck_assert_int_eq(strcmp(str1, str3), s21_strcmp(str1, str3));
ck_assert_int_eq(strcmp(str1, str4), s21_strcmp(str1, str4));

#test strncmp_test
int i = 2;
s21_size_t n[3] = {1, 6, 10};
char str1[100] = "123456";
char str2[100] = "Hello World !!!";
char str3[100] = "123456";
char str4[100] = "12Hello World !!!";
while (i >= 0) {
ck_assert_int_eq(strncmp(str1, str2, n[i]), s21_strncmp(str1, str2, n[i]));
ck_assert_int_eq(strncmp(str1, str3, n[i]), s21_strncmp(str1, str3, n[i]));
ck_assert_int_eq(strncmp(str1, str4, n[i]), s21_strncmp(str1, str4, n[i]));
i--;
}

#test strcpy_test
char str1[100] = "123456";
char str2[100] = "Hello World !!!";
char str3[100] = "789";
ck_assert_str_eq(strcpy(str1, str2), s21_strcpy(str1, str2));
ck_assert_str_eq(strcpy(str2, str3), s21_strcpy(str2, str3));

#test strncpy_test
int i = 2;
char str1[100] = "123456";
char str2[100] = "Hello World !!!";
char str3[100] = "789";
s21_size_t n[3] = {1, 6, 10};
while (i >= 0) {
ck_assert_str_eq(strncpy(str1, str2, n[i]), s21_strncpy(str1, str2, n[i]));
ck_assert_str_eq(strncpy(str2, str3, n[i]), s21_strncpy(str2, str3, n[i]));
i--;
}

#test strcspn_test
char str1[100] = "123456";
char str2[100] = "Hello3 World !!!";
char str3[100] = "468";
ck_assert_int_eq(strcspn(str1, str2), s21_strcspn(str1, str2));
ck_assert_int_eq(strcspn(str1, str3), s21_strcspn(str1, str3));

#test strpbrk_test
char str1[100] = "123456";
char str2[100] = "Hello3 World !!!";
char str3[100] = "468";
ck_assert_str_eq(strpbrk(str1, str2), s21_strpbrk(str1, str2));
ck_assert_str_eq(strpbrk(str1, str3), s21_strpbrk(str1, str3));


#test strrchr_test
char str1[100] = "1234536346";
char str2[100] = "Hello World !!!";
int c = '3';
ck_assert_str_eq(strrchr(str1, c), s21_strrchr(str1, c));
ck_assert_ptr_eq(strrchr(str2, c), s21_strrchr(str2, c));

#test strerror_test
ck_assert_str_eq(strerror(500), s21_strerror(500));
ck_assert_str_eq(strerror(1), s21_strerror(1));
ck_assert_str_eq(strerror(-56), s21_strerror(-56));
ck_assert_str_eq(strerror(-2147483648), s21_strerror(-2147483648));


#test strstr_test
char str1[100] = "12345363462345";
char str2[100] = "1234";
char str3[100] = "23";
char str4[100] = "\0";
ck_assert_str_eq(strstr(str1, str2), s21_strstr(str1, str2));
ck_assert_str_eq(strstr(str1, str3), s21_strstr(str1, str3));
ck_assert_str_eq(strstr(str2, str4), s21_strstr(str2, str4));
ck_assert_ptr_eq(strstr(str2, str1), s21_strstr(str2, str1));


#test strspn_test
char str1[100] = "6651234536346";
char str2[100] = "134";
char str3[100] = "66512345363461234";
char str4[100] = "1234";
ck_assert_int_eq(strspn(str1, str2), s21_strspn(str1, str2));
ck_assert_int_eq(strspn(str3, str4), s21_strspn(str3, str4));


#test strtok_test
char str1[100] = "123453636235";
char str2[100] = "4";
char str4[100] = "8888123456788888";
char str[100] = "8";
ck_assert_str_eq(strtok(str1, str2), s21_strtok(str1, str2));
ck_assert_str_eq(strtok(str4, str), s21_strtok(str4, str));

#test trim_test
char str1[100] = "  **  //QWERTYUI//  //  **";
char str2[100] = " */";
char *except = "QWERTYUI";
ck_assert_str_eq(s21_trim(str1, str2), except);

#test insert_test
char *s1 = "1234789";
char *s2 = "56";
s21_size_t s = 4;
s21_size_t x = 0;
char *ex = "123456789";
char *ex1 = "561234789";
ck_assert_str_eq((char *)s21_insert(s1, s2, s), ex);
ck_assert_str_eq((char *)s21_insert(s1, s2, x), ex1);

#test to_lower_test
char *str = "qWertYuiOp";
char *except = "qwertyuiop";
ck_assert_str_eq(s21_to_lower(str), except);

#test to_upper_test
char *str = "qWertYuiOp";
char *except = "QWERTYUIOP";
ck_assert_str_eq(s21_to_upper(str), except);

